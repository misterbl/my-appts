// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PersonalInfoForm matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PersonalInfo
    apiThunk={
        Object {
            "updateUser": [Function],
            "uploadFile": [Function],
          }
    }
    dirty={false}
    errors={Object {}}
    handleBlur={[Function]}
    handleChange={[Function]}
    handleReset={[Function]}
    handleSubmit={[Function]}
    history={
        Object {
            "action": "PUSH",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 123,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "key": "",
              "pathname": "",
              "search": "",
              "state": "",
            },
            "push": [Function],
            "replace": [Function],
          }
    }
    initialValues={
        Object {
            "address": "",
            "firstName": "",
            "lastName": "",
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
          }
    }
    isSubmitting={false}
    isValid={false}
    isValidating={false}
    location="location"
    match={
        Object {
            "isExact": true,
            "params": Object {},
            "path": "",
            "url": "",
          }
    }
    registerField={[Function]}
    resetForm={[Function]}
    setError={[Function]}
    setErrors={[Function]}
    setFieldError={[Function]}
    setFieldTouched={[Function]}
    setFieldValue={[Function]}
    setFormikState={[Function]}
    setStatus={[Function]}
    setSubmitting={[Function]}
    setTouched={[Function]}
    setValues={[Function]}
    submitCount={0}
    submitForm={[Function]}
    touched={Object {}}
    unregisterField={[Function]}
    user={
        Object {
            "_id": "id",
            "address": "address",
            "availability": undefined,
            "avatar": "avatar",
            "car": false,
            "children": Array [
              Object {
                "dob": 122322,
                "gender": "boy",
                "id": "childId",
                "information": "childInformation",
                "name": "childName",
                "school": "school",
              },
            ],
            "city": "city",
            "drivingLicense": false,
            "email": "email",
            "firstName": "firstName",
            "lastName": "lastName",
            "lat": 1234,
            "lng": 123445,
            "nonSmoker": false,
            "photoURL": "photU\`rl",
            "postCode": "postCode",
            "profileDescription": "profileDescription",
            "profileTitle": "profileTitle",
            "unavailability": undefined,
          }
    }
    validateField={[Function]}
    validateForm={[Function]}
    values={
        Object {
            "address": "addressTest",
            "firstName": "firstNameTest",
            "lastName": "lastNameTest",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="flex pv4 mh3 justify-center relative"
>
          <img
                    alt="user's profile"
                    className="br-100 h3 w3"
                    src="avatar"
          />
          <Svg
                    Icon={[Function]}
                    className="absolute mt4 pr5"
                    fill="black"
                    height="20pt"
                    width="20pt"
          />
          <UploadScreen
                    className="absolute mt4 pr5"
                    onSubmit={[Function]}
                    printcount={1}
                    submitDiv={
                              <Svg
                                        Icon={[Function]}
                                        fill="black"
                                        height="20pt"
                                        width="20pt"
                              />
                    }
          />
</div>,
        <Formik
          enableReinitialize={false}
          initialValues={
                    Object {
                              "address": "address",
                              "firstName": "firstName",
                              "lastName": "lastName",
                            }
          }
          isInitialValid={false}
          onSubmit={[Function]}
          render={[Function]}
          validateOnBlur={true}
          validateOnChange={true}
          validationSchema={
                    ObjectSchema {
                              "_blacklist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "_conditions": Array [],
                              "_defaultDefault": [Function],
                              "_deps": Array [],
                              "_excludedEdges": Array [],
                              "_exclusive": Object {},
                              "_mutate": false,
                              "_nodes": Array [
                                "lastName",
                                "firstName",
                              ],
                              "_options": Object {
                                "abortEarly": true,
                                "recursive": true,
                              },
                              "_type": "object",
                              "_typeError": [Function],
                              "_whitelist": RefSet {
                                "list": Set {},
                                "refs": Map {},
                              },
                              "fields": Object {
                                "firstName": StringSchema {
                                  "_blacklist": RefSet {
                                    "list": Set {},
                                    "refs": Map {},
                                  },
                                  "_conditions": Array [],
                                  "_deps": Array [],
                                  "_exclusive": Object {
                                    "required": false,
                                  },
                                  "_mutate": false,
                                  "_options": Object {
                                    "abortEarly": true,
                                    "recursive": true,
                                  },
                                  "_type": "string",
                                  "_typeError": [Function],
                                  "_whitelist": RefSet {
                                    "list": Set {},
                                    "refs": Map {},
                                  },
                                  "tests": Array [
                                    [Function],
                                    [Function],
                                  ],
                                  "transforms": Array [
                                    [Function],
                                  ],
                                },
                                "lastName": StringSchema {
                                  "_blacklist": RefSet {
                                    "list": Set {},
                                    "refs": Map {},
                                  },
                                  "_conditions": Array [],
                                  "_deps": Array [],
                                  "_exclusive": Object {
                                    "required": false,
                                  },
                                  "_mutate": false,
                                  "_options": Object {
                                    "abortEarly": true,
                                    "recursive": true,
                                  },
                                  "_type": "string",
                                  "_typeError": [Function],
                                  "_whitelist": RefSet {
                                    "list": Set {},
                                    "refs": Map {},
                                  },
                                  "tests": Array [
                                    [Function],
                                    [Function],
                                  ],
                                  "transforms": Array [
                                    [Function],
                                  ],
                                },
                              },
                              "tests": Array [],
                              "transforms": Array [
                                [Function],
                              ],
                            }
          }
/>,
        <form
          className="profile-form mh3 flex flex-column"
          onSubmit={[Function]}
>
          <label
                    className="moon-gray f6"
                    htmlFor="address"
          >
                    <FormattedMessage
                              id="general|placeholder|address"
                              values={Object {}}
                    />
          </label>
          <input
                    autoComplete="off"
                    className="ma0"
                    defaultValue="address"
                    id="autocomplete"
                    name="address"
                    onChange={[Function]}
                    placeholder={undefined}
          />
</form>,
        <Connect(InjectIntl(AboutYouModal))
          updateUser={[Function]}
          user={
                    Object {
                              "_id": "id",
                              "address": "address",
                              "availability": undefined,
                              "avatar": "avatar",
                              "car": false,
                              "children": Array [
                                Object {
                                  "dob": 122322,
                                  "gender": "boy",
                                  "id": "childId",
                                  "information": "childInformation",
                                  "name": "childName",
                                  "school": "school",
                                },
                              ],
                              "city": "city",
                              "drivingLicense": false,
                              "email": "email",
                              "firstName": "firstName",
                              "lastName": "lastName",
                              "lat": 1234,
                              "lng": 123445,
                              "nonSmoker": false,
                              "photoURL": "photU\`rl",
                              "postCode": "postCode",
                              "profileDescription": "profileDescription",
                              "profileTitle": "profileTitle",
                              "unavailability": undefined,
                            }
          }
/>,
      ],
      "className": "flex flex-column ph5-m ph7-l",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <img
              alt="user's profile"
              className="br-100 h3 w3"
              src="avatar"
/>,
            <Svg
              Icon={[Function]}
              className="absolute mt4 pr5"
              fill="black"
              height="20pt"
              width="20pt"
/>,
            <UploadScreen
              className="absolute mt4 pr5"
              onSubmit={[Function]}
              printcount={1}
              submitDiv={
                            <Svg
                                          Icon={[Function]}
                                          fill="black"
                                          height="20pt"
                                          width="20pt"
                            />
              }
/>,
          ],
          "className": "flex pv4 mh3 justify-center relative",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "user's profile",
              "className": "br-100 h3 w3",
              "src": "avatar",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "Icon": [Function],
              "className": "absolute mt4 pr5",
              "fill": "black",
              "height": "20pt",
              "width": "20pt",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "absolute mt4 pr5",
              "onSubmit": [Function],
              "printcount": 1,
              "submitDiv": <Svg
                Icon={[Function]}
                fill="black"
                height="20pt"
                width="20pt"
/>,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "enableReinitialize": false,
          "initialValues": Object {
            "address": "address",
            "firstName": "firstName",
            "lastName": "lastName",
          },
          "isInitialValid": false,
          "onSubmit": [Function],
          "render": [Function],
          "validateOnBlur": true,
          "validateOnChange": true,
          "validationSchema": ObjectSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_defaultDefault": [Function],
            "_deps": Array [],
            "_excludedEdges": Array [],
            "_exclusive": Object {},
            "_mutate": false,
            "_nodes": Array [
              "lastName",
              "firstName",
            ],
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "object",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "fields": Object {
              "firstName": StringSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_deps": Array [],
                "_exclusive": Object {
                  "required": false,
                },
                "_mutate": false,
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "string",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "tests": Array [
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
              },
              "lastName": StringSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_deps": Array [],
                "_exclusive": Object {
                  "required": false,
                },
                "_mutate": false,
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "string",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "tests": Array [
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                ],
              },
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              className="moon-gray f6"
              htmlFor="address"
>
              <FormattedMessage
                            id="general|placeholder|address"
                            values={Object {}}
              />
</label>,
            <input
              autoComplete="off"
              className="ma0"
              defaultValue="address"
              id="autocomplete"
              name="address"
              onChange={[Function]}
              placeholder={undefined}
/>,
            false,
          ],
          "className": "profile-form mh3 flex flex-column",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <FormattedMessage
                id="general|placeholder|address"
                values={Object {}}
/>,
              "className": "moon-gray f6",
              "htmlFor": "address",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "general|placeholder|address",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "autoComplete": "off",
              "className": "ma0",
              "defaultValue": "address",
              "id": "autocomplete",
              "name": "address",
              "onChange": [Function],
              "placeholder": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          false,
        ],
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "updateUser": [Function],
          "user": Object {
            "_id": "id",
            "address": "address",
            "availability": undefined,
            "avatar": "avatar",
            "car": false,
            "children": Array [
              Object {
                "dob": 122322,
                "gender": "boy",
                "id": "childId",
                "information": "childInformation",
                "name": "childName",
                "school": "school",
              },
            ],
            "city": "city",
            "drivingLicense": false,
            "email": "email",
            "firstName": "firstName",
            "lastName": "lastName",
            "lat": 1234,
            "lng": 123445,
            "nonSmoker": false,
            "photoURL": "photU\`rl",
            "postCode": "postCode",
            "profileDescription": "profileDescription",
            "profileTitle": "profileTitle",
            "unavailability": undefined,
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="flex pv4 mh3 justify-center relative"
>
            <img
                        alt="user's profile"
                        className="br-100 h3 w3"
                        src="avatar"
            />
            <Svg
                        Icon={[Function]}
                        className="absolute mt4 pr5"
                        fill="black"
                        height="20pt"
                        width="20pt"
            />
            <UploadScreen
                        className="absolute mt4 pr5"
                        onSubmit={[Function]}
                        printcount={1}
                        submitDiv={
                                    <Svg
                                                Icon={[Function]}
                                                fill="black"
                                                height="20pt"
                                                width="20pt"
                                    />
                        }
            />
</div>,
          <Formik
            enableReinitialize={false}
            initialValues={
                        Object {
                                    "address": "address",
                                    "firstName": "firstName",
                                    "lastName": "lastName",
                                  }
            }
            isInitialValid={false}
            onSubmit={[Function]}
            render={[Function]}
            validateOnBlur={true}
            validateOnChange={true}
            validationSchema={
                        ObjectSchema {
                                    "_blacklist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "_conditions": Array [],
                                    "_defaultDefault": [Function],
                                    "_deps": Array [],
                                    "_excludedEdges": Array [],
                                    "_exclusive": Object {},
                                    "_mutate": false,
                                    "_nodes": Array [
                                      "lastName",
                                      "firstName",
                                    ],
                                    "_options": Object {
                                      "abortEarly": true,
                                      "recursive": true,
                                    },
                                    "_type": "object",
                                    "_typeError": [Function],
                                    "_whitelist": RefSet {
                                      "list": Set {},
                                      "refs": Map {},
                                    },
                                    "fields": Object {
                                      "firstName": StringSchema {
                                        "_blacklist": RefSet {
                                          "list": Set {},
                                          "refs": Map {},
                                        },
                                        "_conditions": Array [],
                                        "_deps": Array [],
                                        "_exclusive": Object {
                                          "required": false,
                                        },
                                        "_mutate": false,
                                        "_options": Object {
                                          "abortEarly": true,
                                          "recursive": true,
                                        },
                                        "_type": "string",
                                        "_typeError": [Function],
                                        "_whitelist": RefSet {
                                          "list": Set {},
                                          "refs": Map {},
                                        },
                                        "tests": Array [
                                          [Function],
                                          [Function],
                                        ],
                                        "transforms": Array [
                                          [Function],
                                        ],
                                      },
                                      "lastName": StringSchema {
                                        "_blacklist": RefSet {
                                          "list": Set {},
                                          "refs": Map {},
                                        },
                                        "_conditions": Array [],
                                        "_deps": Array [],
                                        "_exclusive": Object {
                                          "required": false,
                                        },
                                        "_mutate": false,
                                        "_options": Object {
                                          "abortEarly": true,
                                          "recursive": true,
                                        },
                                        "_type": "string",
                                        "_typeError": [Function],
                                        "_whitelist": RefSet {
                                          "list": Set {},
                                          "refs": Map {},
                                        },
                                        "tests": Array [
                                          [Function],
                                          [Function],
                                        ],
                                        "transforms": Array [
                                          [Function],
                                        ],
                                      },
                                    },
                                    "tests": Array [],
                                    "transforms": Array [
                                      [Function],
                                    ],
                                  }
            }
/>,
          <form
            className="profile-form mh3 flex flex-column"
            onSubmit={[Function]}
>
            <label
                        className="moon-gray f6"
                        htmlFor="address"
            >
                        <FormattedMessage
                                    id="general|placeholder|address"
                                    values={Object {}}
                        />
            </label>
            <input
                        autoComplete="off"
                        className="ma0"
                        defaultValue="address"
                        id="autocomplete"
                        name="address"
                        onChange={[Function]}
                        placeholder={undefined}
            />
</form>,
          <Connect(InjectIntl(AboutYouModal))
            updateUser={[Function]}
            user={
                        Object {
                                    "_id": "id",
                                    "address": "address",
                                    "availability": undefined,
                                    "avatar": "avatar",
                                    "car": false,
                                    "children": Array [
                                      Object {
                                        "dob": 122322,
                                        "gender": "boy",
                                        "id": "childId",
                                        "information": "childInformation",
                                        "name": "childName",
                                        "school": "school",
                                      },
                                    ],
                                    "city": "city",
                                    "drivingLicense": false,
                                    "email": "email",
                                    "firstName": "firstName",
                                    "lastName": "lastName",
                                    "lat": 1234,
                                    "lng": 123445,
                                    "nonSmoker": false,
                                    "photoURL": "photU\`rl",
                                    "postCode": "postCode",
                                    "profileDescription": "profileDescription",
                                    "profileTitle": "profileTitle",
                                    "unavailability": undefined,
                                  }
            }
/>,
        ],
        "className": "flex flex-column ph5-m ph7-l",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <img
                alt="user's profile"
                className="br-100 h3 w3"
                src="avatar"
/>,
              <Svg
                Icon={[Function]}
                className="absolute mt4 pr5"
                fill="black"
                height="20pt"
                width="20pt"
/>,
              <UploadScreen
                className="absolute mt4 pr5"
                onSubmit={[Function]}
                printcount={1}
                submitDiv={
                                <Svg
                                                Icon={[Function]}
                                                fill="black"
                                                height="20pt"
                                                width="20pt"
                                />
                }
/>,
            ],
            "className": "flex pv4 mh3 justify-center relative",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "user's profile",
                "className": "br-100 h3 w3",
                "src": "avatar",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "Icon": [Function],
                "className": "absolute mt4 pr5",
                "fill": "black",
                "height": "20pt",
                "width": "20pt",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "absolute mt4 pr5",
                "onSubmit": [Function],
                "printcount": 1,
                "submitDiv": <Svg
                  Icon={[Function]}
                  fill="black"
                  height="20pt"
                  width="20pt"
/>,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "enableReinitialize": false,
            "initialValues": Object {
              "address": "address",
              "firstName": "firstName",
              "lastName": "lastName",
            },
            "isInitialValid": false,
            "onSubmit": [Function],
            "render": [Function],
            "validateOnBlur": true,
            "validateOnChange": true,
            "validationSchema": ObjectSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_defaultDefault": [Function],
              "_deps": Array [],
              "_excludedEdges": Array [],
              "_exclusive": Object {},
              "_mutate": false,
              "_nodes": Array [
                "lastName",
                "firstName",
              ],
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "object",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "fields": Object {
                "firstName": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "required": false,
                  },
                  "_mutate": false,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
                "lastName": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "required": false,
                  },
                  "_mutate": false,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="moon-gray f6"
                htmlFor="address"
>
                <FormattedMessage
                                id="general|placeholder|address"
                                values={Object {}}
                />
</label>,
              <input
                autoComplete="off"
                className="ma0"
                defaultValue="address"
                id="autocomplete"
                name="address"
                onChange={[Function]}
                placeholder={undefined}
/>,
              false,
            ],
            "className": "profile-form mh3 flex flex-column",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <FormattedMessage
                  id="general|placeholder|address"
                  values={Object {}}
/>,
                "className": "moon-gray f6",
                "htmlFor": "address",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "id": "general|placeholder|address",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "autoComplete": "off",
                "className": "ma0",
                "defaultValue": "address",
                "id": "autocomplete",
                "name": "address",
                "onChange": [Function],
                "placeholder": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            false,
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "updateUser": [Function],
            "user": Object {
              "_id": "id",
              "address": "address",
              "availability": undefined,
              "avatar": "avatar",
              "car": false,
              "children": Array [
                Object {
                  "dob": 122322,
                  "gender": "boy",
                  "id": "childId",
                  "information": "childInformation",
                  "name": "childName",
                  "school": "school",
                },
              ],
              "city": "city",
              "drivingLicense": false,
              "email": "email",
              "firstName": "firstName",
              "lastName": "lastName",
              "lat": 1234,
              "lng": 123445,
              "nonSmoker": false,
              "photoURL": "photU\`rl",
              "postCode": "postCode",
              "profileDescription": "profileDescription",
              "profileTitle": "profileTitle",
              "unavailability": undefined,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
